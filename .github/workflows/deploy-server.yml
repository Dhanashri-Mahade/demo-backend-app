name: 🚀🔥 Deploy on Production Server

on:
  workflow_dispatch:
    inputs:
      jar_file:
        description: "Enter the .jar filename from backup branch (e.g. MyBOQ_2025-09-05.jar)"
        required: true
        type: string
      version:
        description: "Enter new version number (e.g. 1.01.02)"
        required: true

permissions:
    contents: write

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.ctx.outputs.start_time }}
    steps:
      - name: 🕒 Set START_TIME
        id: ctx
        shell: bash
        run: |
          START_TIME=$(TZ=Asia/Kolkata date +"%d-%m-%Y %H:%M")
          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT

  deploy:
    needs: init
    runs-on: ubuntu-latest
    outputs:
      error_step: ${{ steps.capture_failure.outputs.error_step }}
      deploy_success: ${{ steps.mark_success.outputs.deploy_success }}
    steps:
      - name: Checkout backup branch
        uses: actions/checkout@v3
        with:
          ref: backup

      - name: List available JAR files
        run: |
          echo "STEP_NAME=📦 List available JAR files" >> $GITHUB_ENV
          echo "================================================="
          echo "Available JAR files in backup branch:"
          ls -1 *.jar || echo "No JAR files found!"
          echo "================================================="

      - name: Show previous version
        run: |
          echo "STEP_NAME=📋 Show previous version" >> $GITHUB_ENV
          if [ -f deploy.env ]; then
            echo "Previous version:"
            cat deploy.env
          else
            echo "No previous version found."
          fi

      - name: Show user inputs
        run: |
          echo "STEP_NAME=📝 Show user inputs" >> $GITHUB_ENV
          echo "================================================="
          echo "User selected JAR file: ${{ github.event.inputs.jar_file }}"
          echo "User entered version: ${{ github.event.inputs.version }}"
          echo "================================================="

      - name: Select and rename JAR
        run: |
          echo "STEP_NAME=🔄 Select and rename JAR" >> $GITHUB_ENV
          SELECTED="${{ github.event.inputs.jar_file }}"
          if [ "$SELECTED" != "MyBOQ.jar" ]; then
            echo "Renaming $SELECTED -> MyBOQ.jar"
            cp "$SELECTED" MyBOQ.jar
          else
            echo "Already MyBOQ.jar selected, skipping rename."
          fi

      - name: Update deploy.env with new version
        run: |
          echo "STEP_NAME=📄 Update deploy.env" >> $GITHUB_ENV
          NEW_VERSION=${{ github.event.inputs.version }}
          NEW_JAR=${{ github.event.inputs.jar_file }}
          DATE=$(date +'%d-%m-%Y')
          echo "LAST_DATE=$DATE" > deploy.env
          echo "LAST_VERSION=$NEW_VERSION" >> deploy.env
          echo "LAST_JAR=$NEW_JAR" >> deploy.env
          echo "HISTORY=" >> deploy.env
          if [ -f deploy.env ]; then
            # Read existing HISTORY entries if file exists
            grep '^HISTORY=' deploy.env -A 1000 | tail -n +2 >> deploy.env || true
          fi
          # Append new HISTORY entry
          echo "$DATE,$NEW_VERSION,$NEW_JAR" >> deploy.env
          echo "Updated deploy.env:"
          cat deploy.env

      - name: Test SSH Connection (Linux)
        run: |
          echo "STEP_NAME=🔗 Test SSH Connection" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y sshpass
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo '✅ SSH working on Linux Server'"

      - name: Create target folder and check logs directory
        run: |
          echo "STEP_NAME=📁 Create directories" >> $GITHUB_ENV
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            # Create main directory if not exists
            mkdir -p ${{ secrets.SERVER_PATH }}
            
            # Check if logs directory exists
            if [ -d '${{ secrets.SERVER_PATH }}/logs' ]; then
              echo '✅ Logs directory already exists'
            else
              echo '📁 Creating logs directory...'
              mkdir -p ${{ secrets.SERVER_PATH }}/logs
              echo '✅ Logs directory created successfully'
            fi
            
            # Show directory structure
            echo '📂 Directory structure:'
            ls -la ${{ secrets.SERVER_PATH }}/
          "

      - name: Upload JAR to Linux Server
        run: |
          echo "STEP_NAME=⬆️ Upload JAR to server" >> $GITHUB_ENV
          echo "Uploading MyBOQ.jar to Linux server..."
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no MyBOQ.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PATH }}/

      - name: Restart MyBOQ App on server with daily log rotation
        run: |
          echo "STEP_NAME=🚀 Restart MyBOQ App" >> $GITHUB_ENV
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            cd ${{ secrets.SERVER_PATH }}

            echo '🔍 Checking if MyBOQ app is already running...'
            PID=\$(ps -ef | grep 'MyBOQ.jar' | grep -v grep | awk '{print \$2}')

            if [ ! -z \"\$PID\" ]; then
              echo '⚠️ Found running MyBOQ app (PID:' \$PID '), stopping it...'
              kill -9 \$PID
              sleep 3
              echo '🛑 Previous app stopped successfully'
            else
              echo '✅ No running MyBOQ app found, starting fresh.'
            fi

            # Generate log filename with current date (DD_MM_YY format)
            LOG_DATE=\$(date +'%d_%m_%y')
            LOG_FILE=\"logs/myboq_\${LOG_DATE}.log\"
            
            echo \"📝 Today's log file: \$LOG_FILE\"
            
            # Add startup entry to log
            echo \"📅 [\$(date +'%Y-%m-%d %H:%M:%S')] ========================================\" >> \$LOG_FILE
            echo \"📅 [\$(date +'%Y-%m-%d %H:%M:%S')] 🚀 Starting MyBOQ Application\" >> \$LOG_FILE
            echo \"📅 [\$(date +'%Y-%m-%d %H:%M:%S')] 🏷️  Version: ${{ github.event.inputs.version }}\" >> \$LOG_FILE
            echo \"📅 [\$(date +'%Y-%m-%d %H:%M:%S')] 🔌 Port: 9090\" >> \$LOG_FILE
            echo \"📅 [\$(date +'%Y-%m-%d %H:%M:%S')] ========================================\" >> \$LOG_FILE
            
            echo '🚀 Starting new MyBOQ.jar on port 9090...'
            # Start application with daily log file (both stdout and stderr)
            nohup java -jar MyBOQ.jar --server.port=9090 >> \$LOG_FILE 2>&1 &
            
            sleep 5
            
            # Verify application started
            NEW_PID=\$(ps -ef | grep 'MyBOQ.jar' | grep -v grep | awk '{print \$2}')
            if [ ! -z \"\$NEW_PID\" ]; then
              echo \"✅ MyBOQ app started successfully (PID: \$NEW_PID)\"
              echo \"📋 Log file: \$LOG_FILE\"
              echo \"📂 All logs stored in: ${{ secrets.SERVER_PATH }}/logs/\"
              
              # Show last few lines of today's log
              echo '--- Last 5 lines of today'\''s log ---'
              tail -5 \$LOG_FILE 2>/dev/null || echo 'Log file is being created...'
            else
              echo '❌ Failed to start MyBOQ app!'
              exit 1
            fi
          "

      - name: Mark deployment as successful
        id: mark_success
        if: success()
        run: echo "deploy_success=true" >> $GITHUB_OUTPUT

      - name: Show deployment summary
        if: success()
        run: |
          echo "================================================="
          echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
          echo "================================================="
          echo "📦 JAR File: ${{ github.event.inputs.jar_file }}"
          echo "🏷️  Version: ${{ github.event.inputs.version }}"
          echo "🔌 Port: 9090"
          echo "📝 Daily logs: logs/myboq_DD_MM_YY.log"
          echo "🧹 Auto cleanup: Every day at 2 AM (10 days retention)"
          echo "📂 Server path: ${{ secrets.SERVER_PATH }}"
          echo "================================================="

      - name: 🚨 Capture failure step name
        id: capture_failure
        if: failure()
        run: echo "error_step=${STEP_NAME:-Unknown}" >> $GITHUB_OUTPUT

  # Send success notification email
  notify-success:
    needs: [init, deploy]
    runs-on: ubuntu-latest
    if: success() && needs.deploy.outputs.deploy_success == 'true'
    steps:
      - name: Get End Time
        id: get_end_time
        run: echo "end_time=$(TZ=Asia/Kolkata date '+%d-%m-%Y %H:%M')" >> $GITHUB_OUTPUT

      - name: 📧 Send success email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.titan.email
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "MyBOQ App Server Deployment - SUCCESS ✅"
          from: "MyBOQ Server Deployment <${{ secrets.SMTP_USERNAME }}>"
          to: "dhanashri.mahade@siliconmount.com"
          body: |
            📢 MyBOQ App Server Deployment Notification

            Your server deployment has been completed successfully for MyBOQ App

            Deployment Details:
            📦 JAR File Deployed: ${{ github.event.inputs.jar_file }}
            🏷️  Version: ${{ github.event.inputs.version }}
            🔌 Port: 9090
            📅 Start Time: ${{ needs.init.outputs.start_time }}
            📅 End Time: ${{ steps.get_end_time.outputs.end_time }}
            📂 Server Path: ${{ secrets.SERVER_PATH }}
            Status: ✅ SUCCESS

            Application Features:
            📝 Daily logs: logs/myboq_DD_MM_YY.log
            🧹 Auto cleanup: Every day at 2 AM (10 days retention)

            Server Details:
            🖥️  Server: ${{ secrets.SERVER_IP }}
            📁 Path: ${{ secrets.SERVER_PATH }}

            ---
            _Powered by GitHub Actions 🚀_

  # Send failure notification email
  notify-failure:
    needs: [init, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Get End Time
        id: get_end_time
        run: echo "end_time=$(TZ=Asia/Kolkata date '+%d-%m-%Y %H:%M')" >> $GITHUB_OUTPUT

      - name: 📧 Send failure email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.titan.email
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "MyBOQ App Server Deployment - FAILED ❌"
          from: "MyBOQ Server Deployment <${{ secrets.SMTP_USERNAME }}>"
          to: "dhanashri.mahade@siliconmount.com"
          body: |
            ⚠️ MyBOQ App Server Deployment Alert

            Your server deployment for MyBOQ App has FAILED ❌

            Deployment Details:
            📦 JAR File: ${{ github.event.inputs.jar_file }}
            🏷️  Version: ${{ github.event.inputs.version }}
            📅 Start Time: ${{ needs.init.outputs.start_time }}
            📅 End Time: ${{ steps.get_end_time.outputs.end_time }}
            ❌ Failed Step: ${{ needs.deploy.outputs.error_step }}

            Common Failure Points:
            🔗 SSH Connection issues
            ⬆️  JAR file upload problems  
            🚀 Application restart failures
            📁 Directory permission issues

            🔍 Check Logs:  
            https://github.com/Dhanashri-Mahade/demo-backend-app/actions

            ---
            _Powered by GitHub Actions 🚀 — Ensuring transparency in every deployment_