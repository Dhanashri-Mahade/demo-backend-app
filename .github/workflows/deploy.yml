name: üöÄ Upload the Jar file on Github Branch

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]
  workflow_dispatch: # Adds manual trigger

jobs:
  # Step 0: Initialize context (Start Time & Trigger Type) for notifications
  init:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.ctx.outputs.start_time }}
      trigger_type: ${{ steps.ctx.outputs.trigger_type }}
    steps:
      - name: üïí Set START_TIME and TRIGGER_TYPE
        id: ctx
        shell: bash
        run: |
          # Set IST timezone for formatting
          START_TIME=$(TZ=Asia/Kolkata date +"%d-%m-%Y %H:%M")
          EVENT="${{ github.event_name }}"
          # Determine trigger type
          if [ "$EVENT" = "push" ]; then
            TRIGGER_TYPE="push"
          elif [ "$EVENT" = "workflow_dispatch" ]; then
            TRIGGER_TYPE="manual trigger"
          elif [ "$EVENT" = "pull_request" ] && [ "${{ github.event.pull_request.merged || false }}" = "true" ]; then
            TRIGGER_TYPE="merge"
          else
            TRIGGER_TYPE="$EVENT"
          fi
          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT

  build-backup-deploy:
    needs: init
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    outputs:
      old_filename: ${{ steps.export_ctx.outputs.old_filename }}
      error_step: ${{ steps.capture_failure.outputs.error_step }}

    steps:
      # Step 1: Checkout main branch code
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # Mark step for failure reporting
      - name: üìù Mark Step - Checkout
        run: echo "STEP_NAME=üì¶ Checkout Repository" >> $GITHUB_ENV

      # Step 2: Setup JDK for Maven build
      - name: ‚òï Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: "19"
          distribution: "temurin"
      # Mark step for failure reporting
      - name: üìù Mark Step - Setup JDK
        run: echo "STEP_NAME=‚òï Set up JDK 19" >> $GITHUB_ENV

      # Step 3: Build JAR using Maven
      - name: üõ† Build JAR using Maven
        run: |
          echo "STEP_NAME=üõ† Build JAR using Maven" >> $GITHUB_ENV
          mvn clean package -X
          ls -la target/

      # Step 4: Verify JAR file exists
      - name: üîç Verify JAR file
        run: |
          echo "STEP_NAME=üîç Verify JAR file" >> $GITHUB_ENV
          if [ ! -f target/*.jar ]; then
            echo "Error: No JAR file found in target/"
            exit 1
          fi
          JAR_FILE=$(ls target/*.jar)
          echo "Found JAR: $JAR_FILE"
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      # Step 5: Prepare backup branch and rename old JAR if exists
      - name: üìÇ Prepare backup branch and rename old JAR if exists
        run: |
          echo "STEP_NAME=üìÇ Prepare backup branch and rename old JAR if exists" >> $GITHUB_ENV
          git fetch origin
          git checkout backup || git checkout -b backup

          if [ -f "MyBOQ.jar" ] && [ -f ".env.production" ]; then
            OLD_DATE=$(grep '^date=' .env.production | cut -d'=' -f2)
            if [ ! -z "$OLD_DATE" ]; then
              OLD_FILENAME="MyBOQ_${OLD_DATE}.jar"
              echo "Renaming old MyBOQ.jar to ${OLD_FILENAME}"
              mv MyBOQ.jar "${OLD_FILENAME}"
              git add "${OLD_FILENAME}"
              # Persist OLD_FILENAME for later (email)
              echo "OLD_FILENAME=${OLD_FILENAME}" >> $GITHUB_ENV
            fi
          fi

      # Step 6: Generate new .env.production with date, version, timestamp
      - name: üè∑ Create new .env.production
        run: |
          echo "STEP_NAME=üè∑ Create new .env.production" >> $GITHUB_ENV
          TODAY=$(date +"%Y-%m-%d")
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          echo "date=$TODAY" > .env.production
          echo "version=$COMMIT_HASH" >> .env.production
          echo "timestamp=$TIMESTAMP" >> .env.production

      # Step 7: Copy and rename new JAR to MyBOQ.jar
      - name: üì¶ Add new MyBOQ.jar
        run: |
          echo "STEP_NAME=üì¶ Add new MyBOQ.jar" >> $GITHUB_ENV
          cp "${{ env.JAR_FILE }}" MyBOQ.jar
          git add MyBOQ.jar .env.production

      # Step 8: Commit and push to backup branch
      - name: üîÅ Commit and push changes to backup branch
        run: |
          echo "STEP_NAME=üîÅ Commit and push changes to backup branch" >> $GITHUB_ENV
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git commit -m "üîÅ Backup updated - $(date +"%Y-%m-%d %H:%M:%S")" || echo "Nothing to commit"
          git push origin backup --force

      # Step 9: Export OLD_FILENAME for notifications (always)
      - name: üßæ Export notification context
        id: export_ctx
        if: always()
        shell: bash
        run: |
          echo "STEP_NAME=üßæ Export notification context" >> $GITHUB_ENV
          echo "old_filename=${OLD_FILENAME:-}" >> $GITHUB_OUTPUT

      # Step 10: Capture failure step name (if any)
      - name: üö® Capture failure step name
        id: capture_failure
        if: failure()
        shell: bash
        run: |
          echo "error_step=${STEP_NAME:-Unknown}" >> $GITHUB_OUTPUT

  notify-success:
    needs: [init, build-backup-deploy]
    runs-on: ubuntu-latest
    if: success()
    steps:
      # Step A: Compose success email body
      - name: üß© Compose success email
        id: compose_success
        shell: bash
        run: |
          TRIGGER_TYPE='${{ needs.init.outputs.trigger_type }}'
          START_TIME='${{ needs.init.outputs.start_time }}'
          END_TIME=$(TZ=Asia/Kolkata date +"%d-%m-%Y %H:%M")
          OLD_FILENAME='${{ needs.build-backup-deploy.outputs.old_filename }}'

          if [ -n "$OLD_FILENAME" ] && [ "$OLD_FILENAME" != "null" ]; then
            LINE2=" 2) ${OLD_FILENAME}"
            LINE3=" 3) .env.production"
          else
            LINE2=" 2) .env.production"
            LINE3=""
          fi

          BODY="Your workflow has been started for MyBOQ App
          Trigger Type: ${TRIGGER_TYPE}
          Start Time: ${START_TIME}
          End Time: ${END_TIME}
          Status: SUCCESS ‚úÖ
          Files updated in backup branch:
          1) MyBOQ.jar
          ${LINE2}
          ${LINE3}
          Path: https://github.com/Dhanashri-Mahade/demo-backend-app/blob/backup/"

          {
            echo "body<<'EOF'"
            echo "$BODY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # Step B: Send success email (Titan SMTP)
      - name: üìß Send success email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.titan.email
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "MyBOQ App Workflow - SUCCESS ‚úÖ"
          from: "MyBOQ Workflow <${{ secrets.SMTP_USERNAME }}>"
          to: "dhanashri.mahade@siliconmount.com"
          body: ${{ steps.compose_success.outputs.body }}

  notify-failure:
    needs: [init, build-backup-deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      # Step A: Compose failure email body
      - name: üß© Compose failure email
        id: compose_failure
        shell: bash
        run: |
          TRIGGER_TYPE='${{ needs.init.outputs.trigger_type }}'
          START_TIME='${{ needs.init.outputs.start_time }}'
          ERROR_STEP='${{ needs.build-backup-deploy.outputs.error_step }}'
          [ -z "$ERROR_STEP" ] && ERROR_STEP="Unknown"
          BODY="Your workflow has been started for MyBOQ App
          Trigger Type: ${TRIGGER_TYPE}
          Start Time: ${START_TIME}
          Status: FAILED ‚ùå
          Error happened at: Step - ${ERROR_STEP}
          Check logs: https://github.com/Dhanashri-Mahade/demo-backend-app/actions"
          {
            echo "body<<'EOF'"
            echo "$BODY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # Step B: Send failure email (Titan SMTP)
      - name: üìß Send failure email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.titan.email
          server_port: 465
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "MyBOQ App Workflow - FAILED ‚ùå"
          from: "MyBOQ Workflow <${{ secrets.SMTP_USERNAME }}>"
          to: "dhanashri.mahade@siliconmount.com"
          body: ${{ steps.compose_failure.outputs.body }}
